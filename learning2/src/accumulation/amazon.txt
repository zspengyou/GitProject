
1. implement a hashmap
2. version compare
input two string: "12.1.2.0", "12.0"
design the method name and return value

idea from the java interface Comparable
if v1> v2  return 1
if v1 = v2 return 0
if v1 < v2 return -1

follow up=>  what could be wrong with your program  => add the try catch part for the follow up question

public int compare(String v1, String v2){
     if(v1 == null)
     	return -1;
     if(v2 == null)
     	return 1;
	 if(v1.equals(v2))
	 	return 0;     	
     String [] v1Detail = v1.split("'");
     String [] v2Detail = v2.split(".");
     int first = 0;
     int second = 0;
     while(first < vlDetail.length && second < v2Detail.length){
     		int version1 = Integer.MIN_VAL;
     		int version2 = Integer.MIN_VAL;
     		try{
				version1 = Integer.valueOf(v1Detail[first]);
		     }catch(ParseException e){// can not remember the name of the exception
		     	e.printTraceStack();
		     }
		     try{
				int version2 = Integer.valueOf(v2Detail[second]);
		     }catch(ParseException e){
				e.printTraceStack();
		     }    		     		
     		if(version1 > version2)
     			return 1;
     		else if(version1 < version2)
     			return -1;
     }
     if(v1Detail.length > v2Detail.length)
     	return 1;
     else
     	return -1;

}


3. given an array and a target, find the number of duplicate in the array.

public int numOfDuplicate(int[] nums, int target){
	if(nums == null || nums.length = 0)
		return 0;
	int firstIndex = findFirst(nums, target);
	int lastIndex = findLast(nums, target);

	if(firstIndex == -1 || lastIndex == -1)
		return 0;
	return lastIndex - firstIndex + 1;
}
/**
  find first index of target in the array, if can not find => return -1
*/
private int findFirst(int[] nums, int target){
	
}
/**
  find last index of target in the array, if can not find => return -1
*/
private int findLast(int[] nums, int target){
	
}

binary search  => 
to reduce duplicate code, => pass one more parameter to the binary search 

private int findIndex(int[] nums, int target, boolean isFirst){
	
}

4. design a app that all user to rent car

make request :
location: defalut current location, or user can input it
time: default as soon as possible, or user can specify it

return : list of available car  => brand, location, available time, distance, .......

table for car: 
id, brand, location


CarAvailability
id, startTime, endTime


follow up => 
relational database or non-relational database

this design is relational DB

if non-relational DB, then we can combine two table together, since non-relational DB do not requre each row has the same number of column   

make reservation:
return true / false